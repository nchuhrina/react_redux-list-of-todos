{"version":3,"sources":["store/index.ts","api.ts","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx"],"names":["setTodos","todos","type","setError","error","finishLoading","message","sortTodo","sortByField","isLoading","state","loading","loadSortButtons","getSortedTodos","sort","a","b","user","name","localeCompare","title","completed","initialState","store","createStore","action","filter","todo","id","composeWithDevTools","URL","TODOS_URL","USERS_URL","getPreparedTodos","Promise","all","fetch","then","json","users","map","find","userId","ToDo","dispatch","useDispatch","key","className","classnames","item__completed","onClick","TodoList","App","useSelector","loadButtons","downloadTodos","data","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.967222ea.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst START_LOADING = 'START_LOADING';\nconst SET_TODOS = 'SET_TODOS';\nconst SET_ERROR = 'SET_ERROR';\nconst FINISH_LOADING = 'FINISH_LOADING';\nconst REMOVE_TODO = 'REMOVE_TODO';\nconst SORT_TODO = 'SORT_TODO';\n\nexport const startLoading = () => ({\n  type: START_LOADING,\n});\nexport const setTodos = (todos: TodosFromServer) => ({\n  type: SET_TODOS,\n  todos,\n});\n\nexport const setError = (error = '') => ({\n  type: SET_ERROR,\n  error,\n});\n\nexport const finishLoading = (message = '') => ({\n  type: FINISH_LOADING,\n  message,\n});\nexport const removeTodo = (data: number) => ({\n  type: REMOVE_TODO,\n  id: data,\n});\nexport const sortTodo = (sortByField: string) => ({\n  type: SORT_TODO,\n  sortByField,\n});\n\n\nexport const isLoading = (state: RootState) => state.loading;\nexport const loadSortButtons = (state: RootState) => state.loadSortButtons;\nexport const getSortedTodos = (state: RootState) => {\n  switch (state.sortByField) {\n    case 'userName':\n      return [...state.todos]\n        .sort((a, b) => a.user.name.localeCompare(b.user.name));\n    case 'title':\n      return [...state.todos]\n        .sort((a, b) => a.title.localeCompare(b.title));\n    case 'status':\n      return [...state.todos]\n        .sort((a, b) => +a.completed - +b.completed);\n    default: return [...state.todos];\n  }\n};\n\nexport type RootState = {\n  loading: boolean;\n  todos: TodosFromServer[];\n  loadSortButtons: boolean;\n  message: string;\n  sortByField: string;\n};\n\nconst initialState: RootState = {\n  loading: false,\n  todos: [],\n  loadSortButtons: false,\n  message: '',\n  sortByField: 'userName',\n};\n\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return {\n        ...state,\n        loading: true,\n        loadSortButtons: true,\n      };\n\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: [...action.todos],\n      };\n\n    case FINISH_LOADING:\n      return {\n        ...state,\n        loading: false,\n      };\n\n    case REMOVE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.id),\n      };\n\n    case SORT_TODO:\n      return {\n        ...state,\n        sortByField: action.sortByField,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(),\n);\n\nexport default store;\n","const URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\nconst TODOS_URL = `${URL}/todos.json`;\nconst USERS_URL = `${URL}/users.json`;\n\nconst getTodos = () => {\n  return fetch(TODOS_URL)\n    .then(todos => todos.json());\n};\n\nconst getUsers = () => {\n  return fetch(USERS_URL)\n    .then(users => users.json());\n};\n\nexport const getPreparedTodos = async () => {\n  const [todos, users] = await Promise.all([getTodos(), getUsers()]);\n\n  return todos.map((todo: TodoFromServer) => {\n    return {\n      ...todo,\n      user: users.find((user: UserFromServer) => user.id === todo.userId),\n    };\n  });\n};\n","import React from 'react';\nimport classnames from 'classnames';\nimport { useDispatch } from 'react-redux';\nimport { removeTodo } from '../store';\n\ntype Props = {\n  todo: TodosFromServer;\n};\n\nexport const ToDo: React.FC<Props> = ({ todo }) => {\n  const dispatch = useDispatch();\n\n  return (\n\n    <>\n\n      <li\n        key={todo.id}\n        className=\"todo__item\"\n      >\n        <h3 className=\"todo__item--user\">{todo.user.name}</h3>\n        <p className=\"todo__item--text\">{todo.title}</p>\n        <p\n          className={classnames('item__status', {\n            item__completed: todo.completed,\n          })}\n        >\n          {todo.completed ? 'Done' : 'In Process'}\n        </p>\n        <button\n          type=\"button\"\n          className=\"btn btn-delete\"\n          onClick={() => dispatch(removeTodo(todo.id))}\n        >\n          DELETE\n        </button>\n      </li>\n\n    </>\n  );\n};\n","import React from 'react';\nimport { ToDo } from './ToDo';\n\ntype Props = {\n  todos: Array<TodosFromServer>;\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <>\n      <ul className=\"todo__list\">\n        {todos.map(todo => (\n          <ToDo todo={todo} />\n        ))}\n      </ul>\n    </>\n  );\n};\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getPreparedTodos } from './api';\nimport { TodoList } from './components/ToDoList';\nimport './App.css';\n\nimport {\n  isLoading,\n  getSortedTodos,\n  setTodos,\n  setError,\n  startLoading,\n  finishLoading,\n  sortTodo,\n  loadSortButtons,\n} from './store';\n\nconst App = () => {\n  const loading = useSelector(isLoading);\n  const todos = useSelector(getSortedTodos);\n  const loadButtons = useSelector(loadSortButtons);\n  const dispatch = useDispatch();\n\n  const downloadTodos = async () => {\n    dispatch(startLoading());\n    try {\n      const data = await getPreparedTodos();\n\n      dispatch(setTodos(data));\n    } catch (error) {\n      dispatch(setError(`ERROR: ${error}`));\n    }\n\n    dispatch(finishLoading());\n  };\n\n  const sortByTitle = () => {\n    dispatch(sortTodo('title'));\n  };\n\n  const sortByUserName = () => {\n    dispatch(sortTodo('userName'));\n  };\n\n  const sortByStatus = () => {\n    dispatch(sortTodo('status'));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of todos</h1>\n      {loadButtons\n        ? (\n          <div className=\"todo__button\">\n            <button type=\"button\" className=\"btn btn-info\" onClick={sortByTitle}>Sort By Title</button>\n            <button type=\"button\" className=\"btn btn-info\" onClick={sortByUserName}>Sort By Name</button>\n            <button type=\"button\" className=\"btn btn-info\" onClick={sortByStatus}>Sort By Status</button>\n          </div>\n        )\n        : (\n          <button\n            type=\"button\"\n            className=\"btn btn-load\"\n            onClick={downloadTodos}\n          >\n            Load ToDos\n          </button>\n        )}\n      {loading\n        ? 'Loading...'\n        : <TodoList todos={todos} />}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport store from './store';\r\nimport App from './App';\r\n\r\n// Just a convenient component with all the wrappers for the `App`\r\n// The Router component (if you use it) should be placed inside the Provider\r\nconst Root = () => (\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>\r\n);\r\n\r\nReactDOM.render(<Root />, document.getElementById('root'));\r\n"],"sourceRoot":""}